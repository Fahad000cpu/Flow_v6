
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users:
    // - Any authenticated user can read public user profiles.
    // - A user can only write to their own document.
    match /users/{userId} {
      allow get, list: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;

      // Notifications are private to each user.
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Products:
    // - Any authenticated user can read products.
    // - Only the admin can create, update, or delete products.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.email == 'fahadkhanamrohivi@gmail.com';
    }

    // Statuses:
    // - Any authenticated user can create or read statuses.
    match /statuses/{statusId} {
      allow read, create: if request.auth != null;

      // Any authenticated user can like a status.
      match /likes/{likeId} {
        allow read, write: if request.auth != null;
      }
    }

    // 1-on-1 Chats:
    // - Only the two users in the chat can read or write messages.
    // - The chatId must be a combination of the two user UIDs, sorted.
    match /chats/{chatId}/messages/{messageId} {
      allow read, create, delete: if request.auth != null && request.auth.uid in chatId.split('_');
    }

    // Groups:
    // - A user must be authenticated to create a group.
    // - Only members of a group can read or update it.
    match /groups/{groupId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && request.auth.uid in resource.data.members;
      
      // Group Messages:
      // - Only group members can read or create messages.
      // - A user can only delete their own message.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        allow delete: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      }
    }
  }
}
