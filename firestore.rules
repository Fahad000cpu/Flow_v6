rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is the admin
    function isAdmin() {
      return request.auth.token.email == 'fahadkhanamrohivi@gmail.com';
    }

    // Products can be read by anyone, but only modified by an admin
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users can be read by anyone, but a user can only write to their own document.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Notifications can only be read and written by the owner user.
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Statuses can be read by any authenticated user.
    // A user can only create a status for themselves.
    // Likes and other subcollections follow similar rules.
    match /statuses/{statusId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update(update): if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      match /likes/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Groups can only be read by members of the group.
    // Only the creator can update group info.
    // Only members can write messages.
    match /groups/{groupId} {
      allow read: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
      }
    }
    
    // One-on-one chats
    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in chatId.split('_');

      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in chatId.split('_');
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      }
    }
  }
}
